/** @format */
import kleur from 'kleur';
import gradient = require('gradient-string');
import { erc20ABI, wtchTwrABI } from './WtchTwrArtifacts';
import {
	PublicClient,
	createPublicClient,
	createWalletClient,
	http,
  getContractAddress
} from 'viem';
import { base } from 'viem/chains';
import JSBI from 'jsbi';
import { FullMath } from '@uniswap/v3-sdk';
import { config } from 'dotenv';
import { SupabaseClient, createClient } from '@supabase/supabase-js';
import { Database } from './database.types';
config();

export type Observations = Observation[];
export type Observation = { price: number; timestamp: number };
export type DBObservation = {
	'#'?: number | null | undefined;
	chainid: number;
	createdat?: string | null | undefined;
	id?: number;
	pool: string;
	price?: number | null | undefined;
	timestamp?: number | null | undefined;
};
export type Result = {
	price: bigint;
	timestamp: number;
};
export type ResultSet = Result[];
export type GetPriceResult = {
	Observations: Observation[];
	token0: string;
	token1: string;
	feeTier: number;
};

const supabase = createClient<Database>(
	process.env.SUPABASE_URL!,
	process.env.SUPABASE_ANON_KEY!
);

export const wtchTwrAddress =
  '0x731CB243C91FF16e96C24DCcB7aC6Ddf2C57222b' as const

export const wtchTwrConfig = {
  address: wtchTwrAddress,
  abi: wtchTwrABI,
} as const


export async function backfillObservationsArray(
	token0: string,
	token1: string,
	feeTier: number,
	token0decimals: number,
	token1decimals: number
) {

  //wallet client for deploying to forked network 
	const walletClient = createWalletClient({
		chain: base,
		transport: http(process.env.ANVIL_URL, {timeout: 60_000}) ,
	});

  const client = createPublicClient({
		chain: base,
		transport: http(process.env.ANVIL_URL, {timeout: 60_000}) ,
	});
  const localClient = createPublicClient({
		chain: base,
		transport: http(process.env.FORK_URL, {timeout: 60_000}) ,
	});

	const [account] = await walletClient.getAddresses();

  const wtchTwrBytecode = '608060405234801561001057600080fd5b506116ca806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063696d628311610066578063696d6283146101145780637c887c5914610127578063a1707ed51461012f578063cdb5876214610142578063e04b677f1461015557610093565b80630bc5a239146100985780631b5f7279146100c15780633741f277146100e157806360ad19cb14610101575b600080fd5b6100ab6100a63660046112e6565b610168565b6040516100b89190611655565b60405180910390f35b6100d46100cf3660046112fa565b6101d7565b6040516100b8919061148e565b6100f46100ef3660046112e6565b6101ea565b6040516100b891906114ca565b6100ab61010f3660046113d0565b61054b565b6100d46101223660046112a0565b61056e565b6100d46105f3565b6100f461013d3660046112e6565b610602565b6100ab6101503660046113e8565b610942565b6100d4610163366004611261565b61096b565b6000806101768585856101ea565b90506000805b82518163ffffffff1610156101bf57828163ffffffff168151811061019d57fe5b6020908102919091010151516001600160a01b0316919091019060010161017c565b5081516101cd90829061098e565b9695505050505050565b60006101e2846109c0565b949350505050565b606060006101f985858561056e565b90506001600160a01b03811661022a5760405162461bcd60e51b81526004016102219061160f565b60405180910390fd5b6000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561026557600080fd5b505afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190611472565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156102da57600080fd5b505afa1580156102ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103129190611472565b905060008061032085610cf2565b91509150600082820361ffff1667ffffffffffffffff8111801561034357600080fd5b5060405190808252806020026020018201604052801561037d57816020015b61036a611215565b8152602001906001900390816103625790505b5090506060835b8361ffff168161ffff16101561053b57600080896001600160a01b031663252c09d7846040518263ffffffff1660e01b81526004016103c39190611646565b60806040518083038186803b1580156103db57600080fd5b505afa1580156103ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104139190611409565b5050915091506000808b6001600160a01b031663252c09d7866001016040518263ffffffff1660e01b815260040161044b9190611646565b60806040518083038186803b15801561046357600080fd5b505afa158015610477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049b9190611409565b50509150915060006104c785840363ffffffff1660060b85840360060b816104bf57fe5b058d8d6101d7565b905080888b880361ffff16815181106104dc57fe5b6020026020010151600001906001600160a01b031690816001600160a01b03168152505082888b880361ffff168151811061051357fe5b60209081029190910181015163ffffffff909216910152505060019093019250610384915050565b50909a9950505050505050505050565b600060015b600a831061056657600a83049250600a02610550565b90505b919050565b60008054604051630b4c774160e11b81526001600160a01b0390911690631698ee82906105a3908790879087906004016114a2565b60206040518083038186803b1580156105bb57600080fd5b505afa1580156105cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e29190611284565b6000546001600160a01b031681565b6060600061061185858561056e565b90506001600160a01b0381166106395760405162461bcd60e51b81526004016102219061160f565b6000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561067457600080fd5b505afa158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190611472565b90506000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e957600080fd5b505afa1580156106fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107219190611472565b905060008061072f85610efe565b91509150600082820361ffff1667ffffffffffffffff8111801561075257600080fd5b5060405190808252806020026020018201604052801561078c57816020015b610779611215565b8152602001906001900390816107715790505b5090506060835b8361ffff168161ffff16101561053b57600080896001600160a01b031663252c09d7846040518263ffffffff1660e01b81526004016107d29190611646565b60806040518083038186803b1580156107ea57600080fd5b505afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190611409565b5050915091506000808b6001600160a01b031663252c09d7866001016040518263ffffffff1660e01b815260040161085a9190611646565b60806040518083038186803b15801561087257600080fd5b505afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190611409565b50509150915060006108ce85840363ffffffff1660060b85840360060b816104bf57fe5b905080888b880361ffff16815181106108e357fe5b6020026020010151600001906001600160a01b031690816001600160a01b03168152505082888b880361ffff168151811061091a57fe5b60209081029190910181015163ffffffff909216910152505060019093019250610793915050565b60008082841161095457838303610958565b8284035b670de0b6b3a76400009004949350505050565b600080546001600160a01b0319166001600160a01b039290921691909117815590565b60008082116109af5760405162461bcd60e51b815260040161022190611528565b8183816109b857fe5b049392505050565b60008060008360020b126109d7578260020b6109df565b8260020b6000035b9050620d89e8811115610a1d576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216610a3157600160801b610a43565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610a77576ffff97272373d413259a46990580e213a0260801c5b6004821615610a96576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610ab5576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610ad4576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610af3576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610b12576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610b31576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610b51576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610b71576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610b91576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610bb1576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610bd1576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610bf1576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610c11576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610c31576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610c52576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610c72576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610c91576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610cae576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610cc9578060001981610cc557fe5b0490505b640100000000810615610cdd576001610ce0565b60005b60ff16602082901c0192505050919050565b6000806000806000856001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610d3357600080fd5b505afa158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b9190611344565b5050509350935050925060018161ffff1611610d995760405162461bcd60e51b815260040161022190611596565b600080876001600160a01b031663252c09d7856040518263ffffffff1660e01b8152600401610dc89190611646565b60806040518083038186803b158015610de057600080fd5b505afa158015610df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e189190611409565b505091509150600080896001600160a01b031663252c09d760006040518263ffffffff1660e01b8152600401610e4e9190611646565b60806040518083038186803b158015610e6657600080fd5b505afa158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e9190611409565b5050915091508363ffffffff168263ffffffff1610610ecf5760405162461bcd60e51b81526004016102219061155f565b600080610edd84878a610fb2565b91509150610eec82828e611012565b9a509a50505050505050505050915091565b6000806000806000856001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610f3f57600080fd5b505afa158015610f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f779190611344565b5050509350935050925060018161ffff1611610fa55760405162461bcd60e51b815260040161022190611596565b5060009350915050915091565b60008161ffff8116670de0b6b3a7640000810283610fde63ffffffff898903811690610e10906111fb16565b90506000610fec8383610942565b905061ffff8116156110015760018103611004565b60005b955050505050935093915050565b6000806000836001600160a01b031663252c09d7866040518263ffffffff1660e01b81526004016110439190611646565b60806040518083038186803b15801561105b57600080fd5b505afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190611409565b50505090506000846001600160a01b031663252c09d7886040518263ffffffff1660e01b81526004016110c69190611646565b60806040518083038186803b1580156110de57600080fd5b505afa1580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111169190611409565b5091925050610e0f1982019050610e10885b60008161ffff1611801561114757508263ffffffff168563ffffffff16115b801561115a57508861ffff168161ffff16105b156111ed5760405163252c09d760e01b81526001909101906001600160a01b0389169063252c09d790611191908490600401611646565b60806040518083038186803b1580156111a957600080fd5b505afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190611409565b50919650611128915050565b509798969750505050505050565b60008160028104670de0b6b3a7640000850201816109b857fe5b604080518082019091526000808252602082015290565b8051801515811461056957600080fd5b805161ffff8116811461056957600080fd5b803562ffffff8116811461056957600080fd5b600060208284031215611272578081fd5b813561127d8161165e565b9392505050565b600060208284031215611295578081fd5b815161127d8161165e565b6000806000606084860312156112b4578182fd5b83356112bf8161165e565b925060208401356112cf8161165e565b91506112dd6040850161124e565b90509250925092565b6000806000606084860312156112b4578283fd5b60008060006060848603121561130e578283fd5b833561131981611676565b9250602084013561132981611685565b9150604084013561133981611685565b809150509250925092565b600080600080600080600060e0888a03121561135e578283fd5b87516113698161165e565b602089015190975061137a81611676565b95506113886040890161123c565b94506113966060890161123c565b93506113a46080890161123c565b925060a08801516113b481611685565b91506113c260c0890161122c565b905092959891949750929550565b6000602082840312156113e1578081fd5b5035919050565b600080604083850312156113fa578182fd5b50508035926020909101359150565b6000806000806080858703121561141e578384fd5b845163ffffffff81168114611431578485fd5b8094505060208501518060060b8114611448578384fd5b60408601519093506114598161165e565b91506114676060860161122c565b905092959194509250565b600060208284031215611483578081fd5b815161127d81611685565b6001600160a01b0391909116815260200190565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b602080825282518282018190526000919060409081850190868401855b8281101561151b57815180516001600160a01b0316855286015163ffffffff168685015292840192908501906001016114e7565b5091979650505050505050565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526017908201527f6f62736572766174696f6e20777261702061726f756e64000000000000000000604082015260600190565b60208082526053908201527f506f6f6c20646f6573206e6f74206861766520656e6f756768206f627365727660408201527f6174696f6e732c20706c6561736520696e6372656173652074686520636172646060820152721a5b985b1a5d1e481bd9881d1a19481c1bdbdb606a1b608082015260a00190565b6020808252601b908201527f4e6f206578697374696e6720556e697377617020563320506f6f6c0000000000604082015260600190565b61ffff91909116815260200190565b90815260200190565b6001600160a01b038116811461167357600080fd5b50565b8060020b811461167357600080fd5b60ff8116811461167357600080fdfea2646970667358221220a010c2f87dd3e0318b576dc69d1b18f7e18ada9c8d8b4923d4d4da4c6a5a558464736f6c63430007060033'
 

  const publicClient = createPublicClient({
    chain: base,
		transport: http(process.env.ANVIL_URL, {timeout: 60_000}) ,
	});
  const nonce = await publicClient.getTransactionCount({address: account as `0x${string}`});

	const hash = await walletClient.deployContract({
		abi: wtchTwrConfig.abi,
		account,
		bytecode: wtchTwrBytecode as `0x${string}`,
	});

  const localWtchTwr = getContractAddress({
    opcode: "CREATE",
    from: account as `0x${string}`,
    nonce: BigInt(nonce)
  })

  const { request } = await publicClient.simulateContract({
    address: localWtchTwr,
    abi: wtchTwrConfig.abi,
    functionName: 'setUniswapFactory',
    args: ["0x33128a8fC17869897dcE68Ed026d694621f6FDfD" as `0x${string}`],
    account
  })

  await walletClient.writeContract(request)
  // '0xDf2e056f7062790dF95A472f691670717Ae7b1B6'

	const chainId: number = await client.getChainId();
	//get current observations
	const _data: Observation[] = (await client.readContract({
		address: localWtchTwr,
		abi: wtchTwrConfig.abi,
		functionName: 'getFullObservationsArray',
		args: [token0 as `0x${string}`, token1 as `0x${string}`, feeTier],
	})) as unknown as Observation[];

	const pool: string = await client.readContract({
		address: localWtchTwr,
		abi: wtchTwrConfig.abi,
		functionName: 'getPoolAddress',
		args: [token0 as `0x${string}`, token1 as `0x${string}`, feeTier],
	});

	let observations: Observations = [];
	_data?.forEach((_observation) => {
		let observation: Observation = {
			price: convertSqrtX96(
				JSBI.BigInt(_observation.price.valueOf().toString()),
				token0,
				token1,
				token0decimals,
				token1decimals
			),
			timestamp: JSBI.toNumber(JSBI.BigInt(_observation.timestamp)),
		};
		observations!.push(observation);
		return observation;
	});

	const dbObservations: DBObservation[] = observations.map((obs) => ({
		timestamp: obs.timestamp,
		price: obs.price,
		pool: pool,
		chainid: chainId,
		createdat: new Date().toISOString(),
	}));
  const {data,error} = await supabase.auth.signInWithPassword({
		email: process.env.SUPABASE_EMAIL!,
		password: process.env.SUPABASE_PASSWORD!,
	});
	let queryResult = await supabase
		.from('Observations_Base_V1')
		.upsert(dbObservations, {
			onConflict: 'timestamp',
			ignoreDuplicates: true,
      		count: 'exact'
		});
	if (queryResult.error) {
		console.error(queryResult.error);
	}
	queryResult.count! > 0 ? console.log(
		`🏰 WtchTwr: Added ${
			queryResult.count != null ? queryResult.count : 0
		} Observations for pool ${pool}`
	) : console.log(
		`🏰 no new observations.....`
	);
}

export function convertSqrtX96(
	priceSqrtX96: JSBI,
	token0: string,
	token1: string,
	decimals0: number,
	decimals1: number
): number {
	const ratioX1922 = JSBI.multiply(priceSqrtX96, priceSqrtX96);

	const baseToken = token0;
	const quoteToken = token1;

	const inputTokenSellAmountUnconvertedUnits = 1;

	const inputTokenSellAmount = JSBI.BigInt(
		inputTokenSellAmountUnconvertedUnits * 10 ** decimals0
	);
	const baseAmount = inputTokenSellAmount;

	const shift = JSBI.leftShift(JSBI.BigInt(1), JSBI.BigInt(192));

	let quoteAmount = JSBI.BigInt('0');
	if (baseToken < quoteToken) {
		quoteAmount = FullMath.mulDivRoundingUp(ratioX1922, baseAmount, shift);
	} else {
		quoteAmount = FullMath.mulDivRoundingUp(shift, baseAmount, ratioX1922);
	}

	const outputAmountInFormattedUnits =
		JSBI.toNumber(quoteAmount) / 10 ** decimals1;
	return outputAmountInFormattedUnits;
}
